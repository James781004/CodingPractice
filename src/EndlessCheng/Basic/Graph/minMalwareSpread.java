package EndlessCheng.Basic.Graph;

public class minMalwareSpread {

    // https://leetcode.cn/problems/minimize-malware-spread/solutions/2741790/zhi-bao-han-yi-ge-bei-gan-ran-jie-dian-d-ym39/
    private int nodeId, size;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        boolean[] vis = new boolean[n];
        boolean[] isInitial = new boolean[n];
        int mn = Integer.MAX_VALUE;
        for (int x : initial) {
            isInitial[x] = true;
            mn = Math.min(mn, x);
        }

        int ans = -1;
        int maxSize = 0;
        for (int x : initial) {
            if (vis[x]) {
                continue;
            }
            nodeId = -1;
            size = 0;
            dfs(x, graph, vis, isInitial);

            // DFS 結束後，如果發現該連通塊只有一個在 initial 中的節點，並且該連通塊的大小比最大的連通塊更大，
            // 那麼更新最大連通塊的大小，以及答案節點 x。如果一樣大，就更新答案節點的最小值。
            if (nodeId >= 0 && (size > maxSize || size == maxSize && nodeId < ans)) {
                ans = nodeId;
                maxSize = size;
            }
        }
        return ans < 0 ? mn : ans;
    }

    private void dfs(int x, int[][] graph, boolean[] vis, boolean[] isInitial) {
        vis[x] = true; // 用一個 vis 數組標記訪問過的節點
        size++; // DFS 過程中，統計連通塊的大小 size

        // 按照狀態機更新 nodeId
        // 初始狀態為 −1。
        // 如果狀態是 −1，在找到被感染的節點 x 後，狀態變為 x。
        // 如果狀態是非負數 x，在找到另一個被感染的節點後，狀態變為 −2。如果狀態已經是 −2，則不變。
        if (nodeId != -2 && isInitial[x]) {
            nodeId = nodeId == -1 ? x : -2;
        }

        for (int y = 0; y < graph[x].length; y++) {
            if (graph[x][y] == 1 && !vis[y]) {
                dfs(y, graph, vis, isInitial);
            }
        }
    }


}
