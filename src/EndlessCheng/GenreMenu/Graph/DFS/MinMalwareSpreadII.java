package EndlessCheng.GenreMenu.Graph.DFS;

public class MinMalwareSpreadII {

    // https://leetcode.cn/problems/minimize-malware-spread-ii/solutions/2743395/ni-xiang-si-wei-pythonjavaccgojsrust-by-jinc3/
    private int nodeId, size;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        boolean[] vis = new boolean[n];
        boolean[] isInitial = new boolean[n];
        int mn = Integer.MAX_VALUE;
        for (int x : initial) {
            isInitial[x] = true;
            mn = Math.min(mn, x);
        }

        int[] cnt = new int[n];
        for (int i = 0; i < n; i++) {
            if (vis[i] || isInitial[i]) {
                continue;
            }

            // 當前連通塊會被 node_id 節點感染
            // node_id = -1，不會被感染
            // node_id = -2，會被多個節點感染，也就是最終會會感染
            nodeId = -1;
            size = 0;
            dfs(i, graph, vis, isInitial);
            if (nodeId >= 0) { // 只找到一個在 initial 中的節點
                // 刪除節點 nodeId 可以讓 size 個點不被感染
                cnt[nodeId] += size;
            }
        }

        int maxCnt = 0;
        int minNodeId = -1;
        for (int i = 0; i < n; i++) {
            if (cnt[i] > maxCnt) {
                maxCnt = cnt[i];
                minNodeId = i;
            }
        }
        return minNodeId < 0 ? mn : minNodeId;
    }

    private void dfs(int x, int[][] graph, boolean[] vis, boolean[] isInitial) {
        vis[x] = true;
        size++; // 下面的 elif not vis[y]: 保證 x 是沒有被感染的
        for (int y = 0; y < graph.length; y++) {
            if (graph[x][y] == 0) {
                continue;
            }
            if (isInitial[y]) {
                // 按照 924 題的狀態機更新 nodeId
                // 注意避免重復統計，例如圖中的 0 有兩條不同路徑可以遇到 1
                if (nodeId != -2 && nodeId != y) {
                    // if nodeId == -1: 第一次遇到感染點，nodeId = y
                    // if node_id != y:  遇到第二個感染點，nodeId = -2
                    nodeId = nodeId == -1 ? y : -2;
                }
            } else if (!vis[y]) {
                dfs(y, graph, vis, isInitial);
            }
        }
    }


}
